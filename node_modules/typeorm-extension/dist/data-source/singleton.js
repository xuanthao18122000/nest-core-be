"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDataSource = exports.unsetDataSource = exports.hasDataSource = exports.setDataSource = void 0;
const typeorm_1 = require("typeorm");
const options_1 = require("./options");
const instances = {};
const initializePromises = {};
const optionsPromises = {};
function setDataSource(dataSource, alias) {
    alias = alias || 'default';
    instances[alias] = dataSource;
}
exports.setDataSource = setDataSource;
function hasDataSource(alias) {
    alias = alias || 'default';
    return Object.prototype.hasOwnProperty.call(instances, alias);
}
exports.hasDataSource = hasDataSource;
function unsetDataSource(alias) {
    alias = alias || 'default';
    if (Object.prototype.hasOwnProperty.call(instances, alias)) {
        delete instances[alias];
    }
    /* istanbul ignore next */
    if (Object.prototype.hasOwnProperty.call(optionsPromises, alias)) {
        delete optionsPromises[alias];
    }
    /* istanbul ignore next */
    if (Object.prototype.hasOwnProperty.call(initializePromises, alias)) {
        delete initializePromises[alias];
    }
}
exports.unsetDataSource = unsetDataSource;
async function useDataSource(alias) {
    alias = alias || 'default';
    if (Object.prototype.hasOwnProperty.call(instances, alias)) {
        if (!instances[alias].isInitialized) {
            /* istanbul ignore next */
            if (!Object.prototype.hasOwnProperty.call(initializePromises, alias)) {
                initializePromises[alias] = instances[alias].initialize()
                    .catch((e) => {
                    if (alias) {
                        delete initializePromises[alias];
                    }
                    throw e;
                });
            }
            await initializePromises[alias];
        }
        return instances[alias];
    }
    /* istanbul ignore next */
    if (!Object.prototype.hasOwnProperty.call(optionsPromises, alias)) {
        optionsPromises[alias] = (0, options_1.useDataSourceOptions)(alias)
            .catch((e) => {
            if (alias) {
                delete optionsPromises[alias];
            }
            throw e;
        });
    }
    const options = await optionsPromises[alias];
    const dataSource = new typeorm_1.DataSource(options);
    /* istanbul ignore next */
    if (!Object.prototype.hasOwnProperty.call(initializePromises, alias)) {
        initializePromises[alias] = dataSource.initialize()
            .catch((e) => {
            if (alias) {
                delete initializePromises[alias];
            }
            throw e;
        });
    }
    await initializePromises[alias];
    instances[alias] = dataSource;
    return dataSource;
}
exports.useDataSource = useDataSource;
