"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildDataSourceOptions = exports.buildLegacyDataSourceOptions = exports.extendDataSourceOptions = void 0;
const typeorm_1 = require("typeorm");
const seeder_1 = require("../../seeder");
const utils_1 = require("./utils");
const find_1 = require("../find");
async function extendDataSourceOptions(options, tsConfigDirectory) {
    options = (0, seeder_1.setDefaultSeederOptions)(options);
    await (0, utils_1.modifyDataSourceOptionsForRuntimeEnvironment)(options, { root: tsConfigDirectory });
    return options;
}
exports.extendDataSourceOptions = extendDataSourceOptions;
/**
 * Build DataSourceOptions from configuration.
 *
 * @deprecated
 * @param context
 */
async function buildLegacyDataSourceOptions(context) {
    const directory = context.directory || process.cwd();
    const tsconfigDirectory = context.tsconfigDirectory || process.cwd();
    const connectionOptionsReader = new typeorm_1.ConnectionOptionsReader({
        root: directory,
        configName: context.configName,
    });
    const dataSourceOptions = await connectionOptionsReader.get(context.name || 'default');
    return extendDataSourceOptions(dataSourceOptions, tsconfigDirectory);
}
exports.buildLegacyDataSourceOptions = buildLegacyDataSourceOptions;
/**
 * Build DataSourceOptions from DataSource or from configuration.
 *
 * @param context
 */
async function buildDataSourceOptions(context) {
    context = context ?? {};
    const directory = context.directory || process.cwd();
    const tsconfigDirectory = context.tsconfigDirectory || process.cwd();
    const dataSource = await (0, find_1.findDataSource)({
        directory,
        fileName: context.dataSourceName,
    });
    if (dataSource) {
        return extendDataSourceOptions(dataSource.options, tsconfigDirectory);
    }
    return buildLegacyDataSourceOptions(context);
}
exports.buildDataSourceOptions = buildDataSourceOptions;
