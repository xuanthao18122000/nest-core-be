"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.modifyDataSourceOptionsForRuntimeEnvironment = exports.changeTSToJSPath = exports.safeReplaceWindowsSeparator = void 0;
const utils_1 = require("../../utils");
const tsconfig_1 = require("../../utils/tsconfig");
const stripLeadingModifier = (text) => {
    if (text.startsWith('./')) {
        text = text.substring(2);
    }
    return text;
};
function safeReplaceWindowsSeparator(input) {
    if (input.indexOf('*') !== -1 ||
        input.indexOf('**') !== -1 ||
        input.indexOf('{') !== -1) {
        return input;
    }
    return input.replace(/\\/g, '/');
}
exports.safeReplaceWindowsSeparator = safeReplaceWindowsSeparator;
function changeTSToJSPath(input, dist, src) {
    let base = input;
    let baseIndex = input.lastIndexOf('/');
    if (baseIndex !== -1) {
        base = base.substring(baseIndex + 1);
    }
    if (src) {
        src = (0, utils_1.withoutTrailingSlash)(stripLeadingModifier(safeReplaceWindowsSeparator(src)));
    }
    src = src || 'src';
    if (dist) {
        dist = (0, utils_1.withoutTrailingSlash)(stripLeadingModifier(safeReplaceWindowsSeparator(dist)));
    }
    dist = dist || 'dist';
    if (input.indexOf(src) !== -1 &&
        input.indexOf(dist) === -1) {
        const lastIndex = input.lastIndexOf(src);
        const prevCharacter = input.substring(lastIndex - 1, lastIndex);
        if (!prevCharacter || prevCharacter === '/') {
            input = input.substring(0, lastIndex) +
                dist +
                input.substring(lastIndex + src.length);
            baseIndex = input.lastIndexOf('/');
        }
    }
    // if the path already contains a js file extension, we are done
    const jsExtensions = ['js', 'cjs', 'mjs'];
    for (let i = 0; i < jsExtensions.length; i++) {
        if (base.indexOf(jsExtensions[i]) !== -1) {
            return input;
        }
    }
    const tsExtensions = ['ts', 'cts', 'mts'];
    for (let i = 0; i < tsExtensions.length; i++) {
        const regex = new RegExp(`(\\.${tsExtensions[i]}|${tsExtensions[i]})`, 'g');
        let matchesSum;
        const matches = base.match(regex);
        if (Array.isArray(matches)) {
            matchesSum = matches.length;
        }
        let matchesCounter = 0;
        const bracketIndex = base.lastIndexOf('{');
        base = base.replace(regex, (...args) => {
            matchesCounter++;
            // if the file extension name comes after the last bracket index,
            // we can be pretty sure that the extension name is not part of a filename
            if ((args[2] >= bracketIndex && bracketIndex !== -1) ||
                (bracketIndex === -1 && matchesCounter === matchesSum)) {
                return args[0].startsWith('.') ? `.${jsExtensions[i]}` : jsExtensions[i];
            }
            return args[0];
        });
    }
    if (baseIndex !== -1) {
        base = input.substring(0, baseIndex + 1) + base;
    }
    return stripLeadingModifier(base);
}
exports.changeTSToJSPath = changeTSToJSPath;
const keys = [
    'entities',
    'migrations',
    'seeds',
    'factories',
    'subscribers',
];
async function modifyDataSourceOptionsForRuntimeEnvironment(input, options) {
    if ((0, utils_1.isTsNodeRuntimeEnvironment)()) {
        return input;
    }
    options = options || {};
    const { compilerOptions } = await (0, tsconfig_1.readTsConfig)(options.root);
    for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (!(0, utils_1.hasOwnProperty)(input, key) ||
            (options.keys && options.keys.indexOf(key) === -1)) {
            continue;
        }
        let value = input[key];
        if (typeof value === 'string') {
            value = changeTSToJSPath(value, compilerOptions?.outDir);
        }
        else if (Array.isArray(value)) {
            for (let i = 0; i < value.length; i++) {
                if (typeof value[i] === 'string') {
                    value[i] = changeTSToJSPath(value[i], compilerOptions?.outDir);
                }
            }
        }
        input[key] = value;
    }
    return input;
}
exports.modifyDataSourceOptionsForRuntimeEnvironment = modifyDataSourceOptionsForRuntimeEnvironment;
