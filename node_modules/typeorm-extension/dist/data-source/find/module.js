"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findDataSource = void 0;
const locter_1 = require("locter");
const node_path_1 = __importDefault(require("node:path"));
const typeorm_1 = require("typeorm");
const utils_1 = require("../../utils");
const tsconfig_1 = require("../../utils/tsconfig");
const options_1 = require("../options");
async function findDataSource(context) {
    const files = [
        'data-source',
    ];
    context = context || {};
    if (context.fileName) {
        context.fileName = (0, locter_1.removeFileNameExtension)(context.fileName, ['.ts', '.mts', '.cts', '.js', '.mjs', '.cjs']);
        if (context.fileName !== 'data-source') {
            files.unshift(context.fileName);
        }
    }
    let { directory } = context;
    let directoryIsPattern = false;
    if (context.directory) {
        if (node_path_1.default.isAbsolute(context.directory)) {
            directory = context.directory;
        }
        else {
            directoryIsPattern = true;
            directory = (0, options_1.safeReplaceWindowsSeparator)(context.directory);
        }
    }
    const lookupPaths = [];
    for (let j = 0; j < files.length; j++) {
        if (directory &&
            directoryIsPattern) {
            lookupPaths.push(node_path_1.default.posix.join(directory, files[j]));
        }
        lookupPaths.push(...[
            node_path_1.default.posix.join('src', files[j]),
            node_path_1.default.posix.join('src/{db,database}', files[j]),
        ]);
    }
    files.push(...lookupPaths);
    if (!(0, utils_1.isTsNodeRuntimeEnvironment)()) {
        const { compilerOptions } = await (0, tsconfig_1.readTsConfig)();
        const outDir = compilerOptions ? compilerOptions.outDir : undefined;
        for (let j = 0; j < files.length; j++) {
            files[j] = (0, options_1.changeTSToJSPath)(files[j], outDir);
        }
    }
    for (let i = 0; i < files.length; i++) {
        const info = await (0, locter_1.locate)(`${files[i]}.{js,cjs,mjs,ts,cts,mts}`, {
            path: [
                process.cwd(),
                ...(directory && !directoryIsPattern ? [directory] : []),
            ],
            ignore: ['**/*.d.ts'],
        });
        if (info) {
            const fileExports = await (0, locter_1.load)(info);
            if (typeorm_1.InstanceChecker.isDataSource(fileExports)) {
                return fileExports;
            }
            if ((0, utils_1.hasOwnProperty)(fileExports, 'default') &&
                typeorm_1.InstanceChecker.isDataSource(fileExports.default)) {
                return fileExports.default;
            }
            if ((0, locter_1.isObject)(fileExports)) {
                const keys = Object.keys(fileExports);
                for (let j = 0; j < keys.length; j++) {
                    const value = fileExports[keys[j]];
                    if (typeorm_1.InstanceChecker.isDataSource(value)) {
                        return value;
                    }
                }
            }
        }
    }
    return undefined;
}
exports.findDataSource = findDataSource;
