"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeederFactory = void 0;
const faker_1 = require("@faker-js/faker");
const utils_1 = require("../../utils");
const data_source_1 = require("../../data-source");
const utils_2 = require("../utils");
class SeederFactory {
    // --------------------------------------------------------------
    constructor(context) {
        this.context = context;
    }
    // --------------------------------------------------------------
    setMeta(value) {
        this.meta = value;
        return this;
    }
    // --------------------------------------------------------------
    async make(params, save) {
        const factoryFn = this.context.factoryFn(faker_1.faker, this.meta);
        let entity;
        if ((0, utils_2.isPromise)(factoryFn)) {
            entity = await this.resolve(await factoryFn, save);
        }
        else {
            entity = await this.resolve(factoryFn, save);
        }
        if (params) {
            const keys = Object.keys(params);
            for (let i = 0; i < keys.length; i++) {
                entity[keys[i]] = params[keys[i]];
            }
        }
        return entity;
    }
    // --------------------------------------------------------------
    async save(params, options) {
        const dataSource = await (0, data_source_1.useDataSource)();
        const entity = await this.make(params, true);
        const entityManager = dataSource.getRepository(this.context.entity);
        return entityManager.save(entity, options);
    }
    async saveMany(amount, params, options) {
        const items = [];
        for (let i = 0; i < amount; i++) {
            const item = await this.save(params, options);
            items.push(item);
        }
        return items;
    }
    // --------------------------------------------------------------
    async resolve(entity, save) {
        const keys = Object.keys(entity);
        for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            const value = entity[key];
            if (!(0, utils_1.hasOwnProperty)(entity, key)) {
                // eslint-disable-next-line no-continue
                continue;
            }
            if (typeof value === 'object' &&
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                value instanceof SeederFactory) {
                if (save) {
                    entity[key] = await value.save();
                }
                else {
                    entity[key] = await value.make();
                }
            }
            if (value &&
                (0, utils_1.hasOwnProperty)(value, 'then') &&
                typeof value.then === 'function') {
                entity[key] = await value;
            }
        }
        return entity;
    }
}
exports.SeederFactory = SeederFactory;
