"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dropSQLiteDatabase = exports.createSQLiteDatabase = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const errors_1 = require("../../errors");
const utils_1 = require("./utils");
const utils_2 = require("../utils");
async function createSQLiteDatabase(context) {
    context = await (0, utils_2.buildDatabaseCreateContext)(context);
    if (!context.options) {
        throw errors_1.OptionsError.undeterminable();
    }
    const options = (0, utils_1.buildDriverOptions)(context.options);
    if (!options.database) {
        throw errors_1.OptionsError.databaseNotDefined();
    }
    const filePath = path_1.default.isAbsolute(options.database) ?
        options.database :
        path_1.default.join(process.cwd(), options.database);
    const directoryPath = path_1.default.dirname(filePath);
    await fs_1.default.promises.access(directoryPath, fs_1.default.constants.W_OK);
    if (context.synchronize) {
        await (0, utils_2.setupDatabaseSchema)(context.options);
    }
}
exports.createSQLiteDatabase = createSQLiteDatabase;
async function dropSQLiteDatabase(context) {
    context = await (0, utils_2.buildDatabaseDropContext)(context);
    if (!context.options) {
        throw errors_1.OptionsError.undeterminable();
    }
    const options = (0, utils_1.buildDriverOptions)(context.options);
    if (!options.database) {
        throw errors_1.OptionsError.databaseNotDefined();
    }
    const filePath = path_1.default.isAbsolute(options.database) ?
        options.database :
        path_1.default.join(process.cwd(), options.database);
    try {
        await fs_1.default.promises.access(filePath, fs_1.default.constants.F_OK | fs_1.default.constants.W_OK);
        if (context.ifExist) {
            await fs_1.default.promises.unlink(filePath);
        }
    }
    catch (e) {
        // ...
    }
}
exports.dropSQLiteDatabase = dropSQLiteDatabase;
