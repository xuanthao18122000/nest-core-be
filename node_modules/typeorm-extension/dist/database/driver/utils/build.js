"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildDriverOptions = void 0;
const DriverUtils_1 = require("typeorm/driver/DriverUtils");
const charset_1 = require("./charset");
const character_set_1 = require("./character-set");
function buildDriverOptions(options) {
    let driverOptions;
    switch (options.type) {
        case 'mysql':
        case 'mariadb':
        case 'postgres':
        case 'cockroachdb':
        case 'mssql':
        case 'oracle':
            driverOptions = DriverUtils_1.DriverUtils.buildDriverOptions(options.replication ? options.replication.master : options);
            break;
        case 'mongodb':
            driverOptions = DriverUtils_1.DriverUtils.buildMongoDBDriverOptions(options);
            break;
        default:
            driverOptions = DriverUtils_1.DriverUtils.buildDriverOptions(options);
    }
    const charset = (0, charset_1.getCharsetFromDataSourceOptions)(options);
    const characterSet = (0, character_set_1.getCharacterSetFromDataSourceOptions)(options);
    return {
        host: driverOptions.host,
        user: driverOptions.user || driverOptions.username,
        password: driverOptions.password,
        database: driverOptions.database,
        port: driverOptions.port,
        ...(charset ? { charset } : {}),
        ...(characterSet ? { characterSet } : {}),
        ...(driverOptions.ssl ? { ssl: driverOptions.ssl } : {}),
        ...(driverOptions.url ? { url: driverOptions.url } : {}),
        ...(driverOptions.connectString ? { connectString: driverOptions.connectString } : {}),
        ...(driverOptions.sid ? { sid: driverOptions.sid } : {}),
        ...(driverOptions.serviceName ? { serviceName: driverOptions.serviceName } : {}),
        ...(options.extra ? { extra: options.extra } : {}),
        ...(driverOptions.domain ? { domain: driverOptions.domain } : {}),
    };
}
exports.buildDriverOptions = buildDriverOptions;
