"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dropMySQLDatabase = exports.createMySQLDatabase = exports.executeSimpleMysqlQuery = exports.createSimpleMySQLConnection = void 0;
const errors_1 = require("../../errors");
const utils_1 = require("./utils");
const utils_2 = require("../utils");
async function createSimpleMySQLConnection(driver, options) {
    /**
     * mysql|mysql2 library
     */
    const { createConnection } = driver.mysql;
    const option = {
        host: options.host,
        user: options.user,
        password: options.password,
        port: options.port,
        ssl: options.ssl,
        ...(options.extra ? options.extra : {}),
    };
    return createConnection(option);
}
exports.createSimpleMySQLConnection = createSimpleMySQLConnection;
async function executeSimpleMysqlQuery(connection, query, endConnection = true) {
    return new Promise(((resolve, reject) => {
        connection.query(query, (queryErr, queryResult) => {
            if (endConnection)
                connection.end();
            if (queryErr) {
                reject(queryErr);
            }
            resolve(queryResult);
        });
    }));
}
exports.executeSimpleMysqlQuery = executeSimpleMysqlQuery;
async function createMySQLDatabase(context) {
    context = await (0, utils_2.buildDatabaseCreateContext)(context);
    if (!context.options) {
        throw errors_1.OptionsError.undeterminable();
    }
    const options = (0, utils_1.buildDriverOptions)(context.options);
    const driver = (0, utils_1.createDriver)(context.options);
    const connection = await createSimpleMySQLConnection(driver, options);
    /**
     * @link https://github.com/typeorm/typeorm/blob/master/src/driver/mysql/MysqlQueryRunner.ts#L297
     */
    let query = context.ifNotExist ?
        `CREATE DATABASE IF NOT EXISTS \`${options.database}\`` :
        `CREATE DATABASE \`${options.database}\``;
    if (typeof options.charset === 'string') {
        const { charset } = options;
        let { characterSet } = options;
        if (typeof characterSet === 'undefined') {
            if (charset.toLowerCase().startsWith('utf8mb4')) {
                characterSet = 'utf8mb4';
            }
            else if (charset.toLowerCase().startsWith('utf8')) {
                characterSet = 'utf8';
            }
        }
        if (typeof characterSet === 'string') {
            query += ` CHARACTER SET ${characterSet} COLLATE ${charset}`;
        }
    }
    const result = await executeSimpleMysqlQuery(connection, query);
    if (context.synchronize) {
        await (0, utils_2.setupDatabaseSchema)(context.options);
    }
    return result;
}
exports.createMySQLDatabase = createMySQLDatabase;
async function dropMySQLDatabase(context) {
    context = await (0, utils_2.buildDatabaseDropContext)(context);
    if (!context.options) {
        throw errors_1.OptionsError.undeterminable();
    }
    const options = (0, utils_1.buildDriverOptions)(context.options);
    const driver = (0, utils_1.createDriver)(context.options);
    const connection = await createSimpleMySQLConnection(driver, options);
    /**
     * @link https://github.com/typeorm/typeorm/blob/master/src/driver/mysql/MysqlQueryRunner.ts#L306
     */
    const query = context.ifExist ?
        `DROP DATABASE IF EXISTS \`${options.database}\`` :
        `DROP DATABASE \`${options.database}\``;
    await executeSimpleMysqlQuery(connection, 'SET FOREIGN_KEY_CHECKS=0;', false);
    const result = await executeSimpleMysqlQuery(connection, query, false);
    await executeSimpleMysqlQuery(connection, 'SET FOREIGN_KEY_CHECKS=1;');
    return result;
}
exports.dropMySQLDatabase = dropMySQLDatabase;
