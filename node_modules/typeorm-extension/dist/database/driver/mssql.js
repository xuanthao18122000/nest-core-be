"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dropMsSQLDatabase = exports.createMsSQLDatabase = exports.createSimpleMsSQLConnection = void 0;
const errors_1 = require("../../errors");
const utils_1 = require("./utils");
const utils_2 = require("../utils");
async function createSimpleMsSQLConnection(driver, options) {
    const option = {
        user: options.user,
        password: options.password,
        server: options.host,
        port: options.port || 1433,
        ...(options.extra ? options.extra : {}),
        ...(options.domain ? { domain: options.domain } : {}),
    };
    await driver.mssql.connect(option);
    return driver.mssql;
}
exports.createSimpleMsSQLConnection = createSimpleMsSQLConnection;
async function createMsSQLDatabase(context) {
    context = await (0, utils_2.buildDatabaseCreateContext)(context);
    if (!context.options) {
        throw errors_1.OptionsError.undeterminable();
    }
    const options = (0, utils_1.buildDriverOptions)(context.options);
    const driver = (0, utils_1.createDriver)(context.options);
    const connection = await createSimpleMsSQLConnection(driver, options);
    /**
     * @link https://github.com/typeorm/typeorm/blob/master/src/driver/sqlserver/SqlServerQueryRunner.ts#L416
     */
    let query = context.ifNotExist ?
        `IF DB_ID('${options.database}') IS NULL CREATE DATABASE "${options.database}"` :
        `CREATE DATABASE "${options.database}"`;
    if (typeof options.characterSet === 'string') {
        query += ` CHARACTER SET ${options.characterSet}`;
    }
    const result = await connection.query(query);
    if (context.synchronize) {
        await (0, utils_2.setupDatabaseSchema)(context.options);
    }
    return result;
}
exports.createMsSQLDatabase = createMsSQLDatabase;
async function dropMsSQLDatabase(context) {
    context = await (0, utils_2.buildDatabaseDropContext)(context);
    if (!context.options) {
        throw errors_1.OptionsError.undeterminable();
    }
    const options = (0, utils_1.buildDriverOptions)(context.options);
    const driver = (0, utils_1.createDriver)(context.options);
    const connection = await createSimpleMsSQLConnection(driver, options);
    /**
     * @link https://github.com/typeorm/typeorm/blob/master/src/driver/sqlserver/SqlServerQueryRunner.ts#L425
     */
    const query = context.ifExist ?
        `IF DB_ID('${options.database}') IS NOT NULL DROP DATABASE "${options.database}"` :
        `DROP DATABASE "${options.database}"`;
    return connection.query(query);
}
exports.dropMsSQLDatabase = dropMsSQLDatabase;
