"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyFilters = exports.applyQueryFilters = exports.applyQueryFiltersParseOutput = exports.applyFiltersTransformed = exports.transformParsedFilters = void 0;
const rapiq_1 = require("rapiq");
const typeorm_1 = require("typeorm");
const utils_1 = require("../../utils");
// --------------------------------------------------
function transformParsedFilters(data, options = {}) {
    options = options || {};
    const items = [];
    for (let i = 0; i < data.length; i++) {
        const alias = (0, utils_1.getAliasForPath)(options.relations, data[i].path) ||
            options.defaultAlias ||
            options.defaultPath;
        const fullKey = (0, utils_1.buildKeyWithPrefix)(data[i].key, alias);
        const filter = data[i];
        const statement = [
            fullKey,
        ];
        let bindingKey = typeof options.bindingKey === 'function' ?
            options.bindingKey(fullKey) :
            undefined;
        if (typeof bindingKey === 'undefined') {
            bindingKey = `filter_${fullKey.replace('.', '_')}`;
        }
        if (filter.value === null || typeof filter.value === 'undefined') {
            statement.push('IS');
            if (filter.operator === rapiq_1.FilterComparisonOperator.NOT_EQUAL) {
                statement.push('NOT');
            }
            statement.push('NULL');
            items.push({
                statement: statement.join(' '),
                binding: {},
            });
            continue;
        }
        switch (filter.operator) {
            case rapiq_1.FilterComparisonOperator.EQUAL:
            case rapiq_1.FilterComparisonOperator.NOT_EQUAL: {
                if (filter.operator === rapiq_1.FilterComparisonOperator.EQUAL) {
                    statement.push('=');
                }
                else {
                    statement.push('!=');
                }
                statement.push(`:${bindingKey}`);
                break;
            }
            case rapiq_1.FilterComparisonOperator.LIKE:
            case rapiq_1.FilterComparisonOperator.NOT_LIKE: {
                if (filter.operator === rapiq_1.FilterComparisonOperator.NOT_LIKE) {
                    statement.push('NOT');
                }
                statement.push('LIKE');
                statement.push(`:${bindingKey}`);
                filter.value += '%';
                break;
            }
            case rapiq_1.FilterComparisonOperator.IN:
            case rapiq_1.FilterComparisonOperator.NOT_IN: {
                if (filter.operator === rapiq_1.FilterComparisonOperator.NOT_IN) {
                    statement.push('NOT');
                }
                statement.push('IN');
                statement.push(`(:...${bindingKey})`);
                if (Array.isArray(filter.value)) {
                    const nullIndex = filter.value.indexOf(null);
                    if (nullIndex !== -1) {
                        filter.value.splice(nullIndex, 1);
                        statement.unshift('(');
                        if (filter.operator === rapiq_1.FilterComparisonOperator.NOT_IN) {
                            statement.push('AND');
                        }
                        else {
                            statement.push('OR');
                        }
                        statement.push(fullKey);
                        statement.push('IS');
                        if (filter.operator === rapiq_1.FilterComparisonOperator.NOT_IN) {
                            statement.push('NOT');
                        }
                        statement.push('NULL');
                        statement.push(')');
                    }
                }
                break;
            }
            case rapiq_1.FilterComparisonOperator.LESS_THAN:
            case rapiq_1.FilterComparisonOperator.LESS_THAN_EQUAL:
            case rapiq_1.FilterComparisonOperator.GREATER_THAN:
            case rapiq_1.FilterComparisonOperator.GREATER_THAN_EQUAL: {
                if (filter.operator === rapiq_1.FilterComparisonOperator.LESS_THAN) {
                    statement.push('<');
                }
                else if (filter.operator === rapiq_1.FilterComparisonOperator.LESS_THAN_EQUAL) {
                    statement.push('<=');
                }
                else if (filter.operator === rapiq_1.FilterComparisonOperator.GREATER_THAN) {
                    statement.push('>');
                }
                else {
                    statement.push('>=');
                }
                statement.push(`:${bindingKey}`);
                break;
            }
        }
        items.push({
            statement: statement.join(' '),
            binding: { [bindingKey]: filter.value },
        });
    }
    return items;
}
exports.transformParsedFilters = transformParsedFilters;
/**
 * Apply transformed filter[s] parameter data on the db query.
 *
 * @param query
 * @param data
 */
function applyFiltersTransformed(query, data) {
    if (data.length === 0) {
        return data;
    }
    /* istanbul ignore next */
    query.andWhere(new typeorm_1.Brackets((qb) => {
        for (let i = 0; i < data.length; i++) {
            if (i === 0) {
                qb.where(data[i].statement, data[i].binding);
            }
            else {
                qb.andWhere(data[i].statement, data[i].binding);
            }
        }
    }));
    return data;
}
exports.applyFiltersTransformed = applyFiltersTransformed;
/**
 * Apply parsed filter[s] parameter data on the db query.
 *
 * @param query
 * @param data
 * @param options
 */
function applyQueryFiltersParseOutput(query, data, options) {
    applyFiltersTransformed(query, transformParsedFilters(data, options));
    return data;
}
exports.applyQueryFiltersParseOutput = applyQueryFiltersParseOutput;
// --------------------------------------------------
/**
 * Apply raw filter[s] parameter data on the db query.
 *
 * @param query
 * @param data
 * @param options
 */
function applyQueryFilters(query, data, options) {
    options = options || {};
    if (options.defaultAlias) {
        options.defaultPath = options.defaultAlias;
    }
    return applyQueryFiltersParseOutput(query, (0, rapiq_1.parseQueryFilters)(data, options), options);
}
exports.applyQueryFilters = applyQueryFilters;
/**
 * Apply raw filter[s] parameter data on the db query.
 *
 * @param query
 * @param data
 * @param options
 */
function applyFilters(query, data, options) {
    return applyQueryFilters(query, data, options);
}
exports.applyFilters = applyFilters;
