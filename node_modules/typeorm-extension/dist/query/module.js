"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyQuery = exports.applyQueryParseOutput = void 0;
const rapiq_1 = require("rapiq");
const parameter_1 = require("./parameter");
const utils_1 = require("./utils");
function applyQueryParseOutput(query, context) {
    if (context.fields) {
        (0, parameter_1.applyQueryFieldsParseOutput)(query, context.fields, {
            defaultAlias: context.defaultPath,
            relations: context.relations,
        });
    }
    if (context.filters) {
        (0, parameter_1.applyQueryFiltersParseOutput)(query, context.filters, {
            defaultAlias: context.defaultPath,
            relations: context.relations,
        });
    }
    if (context.pagination) {
        (0, parameter_1.applyQueryPaginationParseOutput)(query, context.pagination);
    }
    if (context.relations) {
        (0, parameter_1.applyQueryRelationsParseOutput)(query, context.relations, {
            defaultAlias: context.defaultPath,
        });
    }
    if (context.sort) {
        (0, parameter_1.applyQuerySortParseOutput)(query, context.sort);
    }
    return context;
}
exports.applyQueryParseOutput = applyQueryParseOutput;
function applyQuery(query, input, options) {
    options = options || {};
    if (options.defaultAlias) {
        options.defaultPath = options.defaultAlias;
    }
    if (typeof options.fields === 'undefined' ||
        !(0, utils_1.isQueryOptionDefined)(options.fields, ['allowed', 'default'])) {
        options.fields = false;
    }
    if (typeof options.filters === 'undefined' ||
        !(0, utils_1.isQueryOptionDefined)(options.filters, ['allowed', 'default'])) {
        options.filters = false;
    }
    if (typeof options.pagination === 'undefined') {
        options.pagination = false;
    }
    if (typeof options.relations === 'undefined' ||
        !(0, utils_1.isQueryOptionDefined)(options.relations, ['allowed'])) {
        options.relations = false;
    }
    if (typeof options.sort === 'undefined' ||
        !(0, utils_1.isQueryOptionDefined)(options.sort, ['allowed', 'default'])) {
        options.sort = false;
    }
    const output = applyQueryParseOutput(query, (0, rapiq_1.parseQuery)(input, options));
    return {
        ...output,
        ...(options.defaultAlias ? { defaultAlias: options.defaultAlias } : {}),
    };
}
exports.applyQuery = applyQuery;
