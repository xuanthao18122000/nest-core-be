import { Flatten, NestedKeys, ObjectLiteral, OnlyObject, SimpleKeys } from '../type';
type ParseAllowedObjectOption<T extends ObjectLiteral = ObjectLiteral> = {
    [K in keyof T]?: T[K] extends OnlyObject<T[K]> ? ParseAllowedOption<Flatten<T[K]>> : never;
};
export type ParseAllowedOption<T extends ObjectLiteral = ObjectLiteral> = T extends ObjectLiteral ? (ParseAllowedObjectOption<T> | (SimpleKeys<T>[] | ParseAllowedObjectOption<T>)[] | NestedKeys<T>[]) : string[];
export {};
//# sourceMappingURL=type.d.ts.map